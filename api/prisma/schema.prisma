// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

generator nestgraphql {
  provider               = "prisma-nestjs-graphql"
  output                 = "../src/@generated/nestjs"
  fileSuffix             = ""
  purgeOutput            = true
  combineScalarFilters   = true
  emitSingle             = true
  noAtomicOperations     = true
  skipJSDoc              = true
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Property {
  id            Int        @id @default(autoincrement())
  address       String
  city          String
  state         String
  zipCode       String
  status        String     // "OCCUPIED", "VACANT", "MAINTENANCE"
  propertyType  String     // "APARTMENT", "HOUSE", "CONDO", "COMMERCIAL"
  monthlyRent   Float
  image         String
  bedrooms      Int
  bathrooms     Float
  sqft          Int
  yearBuilt     Int
  lastRenovated Int?
  amenities     String     // Stored as JSON string
  roi           Float?
  occupancyRate Float?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  cashFlows     CashFlow[]
  tickets       Ticket[]
  leases        Lease[]
}

model CashFlow {
  id         Int      @id @default(autoincrement())
  amount     Float
  type       String   // "INCOME" or "EXPENSE"
  category   String   // "RENT", "REPAIR", "UTILITY", etc.
  date       DateTime
  note       String?
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Lease {
  id           Int      @id @default(autoincrement())
  startDate    DateTime
  endDate      DateTime
  monthlyRent  Float
  tenantName   String
  tenantEmail  String?
  tenantPhone  String?
  isActive     Boolean  @default(true)
  property     Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId   Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Ticket {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  priority    String   // "LOW", "MEDIUM", "HIGH", "URGENT"
  status      String   // "OPEN", "IN_PROGRESS_BY_AI", "NEEDS_MANUAL_REVIEW", "RESOLVED"
  property    Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId  Int
  metadata    String?  // Stored as JSON string
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Investment {
  id                Int      @id @default(autoincrement())
  investmentId      String   // External ID of the investment
  name              String
  type              String
  amount            Float
  expectedReturn    String
  risk              String
  date              DateTime @default(now())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}
